{
    "collab_server" : "",
    "contents" : "##Read raw NMEA data\nrm(list=ls())\noptions(scipen=999)\n\n#Load necessary libraries\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\n\n\n#load supporting functions\nsource(\"./src/functions.R\")\n\n# Import raw csv file ==============\nrawdat <- read.csv(\"./dat/datalog3\", header=FALSE, stringsAsFactors = FALSE)\n\n\n\n# TIME.MSamp Cleanup ===============\n\n#Remove any rows where date column has the inccorrect number of characters\ndat <- rawdat[nchar(rawdat$V1)==26, ]  \n\n#extract the TIME.MSamp in seconds\ndat$TIME.MS <- str_sub(dat$V1, start=4, end=16) \n\n\n\n\n\n## split into different frames =========\n \n#extract NMEA Headers\ndat$NMEA <- str_extract(dat$V1, \"\\\\$.*\")\n\n\n#MWV - wind speed from Raymarine =======\nmwv <- dat[dat$NMEA ==\"$IIMWV\",] %>% \n        select(TIME.MS, V2, V4) %>% \n        rename(\"AWA\"=V2, \"AWS\"=V4) %>%\n        mutate(AWA = as.numeric(AWA), \n               AWS = as.numeric(AWS)) %>%\n        filter(AWS < 100) %>%\n        na.omit()\n\n#STW - boat speed from Raymarine ====                                                     \nstw <- dat[dat$NMEA ==\"$IIVHW\", ] %>% \n        select(TIME.MS, V6) %>% rename(\"STW\"=V6) %>%\n        mutate(STW = as.numeric(STW)) %>%\n        filter(STW < 13) %>%\n        na.omit()\n\n\n#VLW - boat distance travelled from Raymarine ====\nvlw <- dat[dat$NMEA == \"$IIVLW\", ] %>% \n        select(TIME.MS, V2) %>% \n        rename(\"CM.MILES\"=V2)\nvlw$CM.MILES <- as.numeric(vlw$CM.MILES)\nvlw$CM.MILES[vlw$CM.MILES > 5220.3] <- NA\nvlw$CM.MILES[vlw$CM.MILES < 5069] <- NA\n\n#MTW - Water Temperature from Raymarine ====\nmtw <- dat[dat$NMEA == \"$IIMTW\", ] %>% \n               select(TIME.MS, V2) %>% \n               rename(\"MTW\"=V2) %>% \n               mutate(MTW = as.numeric(MTW)) %>% \n               filter(MTW < 26) %>%\n               na.omit()\n\n\n#GPS BOD - bearing from waypoint to waypoint ====\n\n#bod.m = bearing magnetic\n#bod.t = bearing true\n\nbod <- dat[dat$NMEA==\"$GPBOD\",] %>% \n          select(TIME.MS, V2, V4, V6) %>% \n          rename(\"BOD.T\"=V2, \n                 \"BOD.M\" =V4, \n                 \"BOD.WPT\" = V6) %>% \n          mutate(BOD.T =as.numeric(BOD.T), \n                 BOD.M= as.numeric(BOD.M))  %>%\n          na.omit()\n\n\n#GPS BWC - Bearing & Distance to Waypoint ====\n\n#wpt.lat = waypoint latitude\n#wpt.long = waypoint longitude\n#bwc.t = bearing to waypoint True\n#bwc.m = bearing to waypoint Mag\n#wpt.dis = Distance to Waypoint (nm)\n#wpt = Waypoint Name\n\n\nbwc <- dat[dat$NMEA==\"$GPBWC\", ] %>% \n       select(TIME.MS, V3, V5, V7, V9, V11, V13) %>%\n       mutate(V3 = convCoord(as.numeric(V3)), \n              V5 = convCoord(as.numeric(V5))*-1, \n              V7 = as.numeric(V7), \n              V9 = as.numeric(V9), \n              V11 = as.numeric(V11)) %>% \n       rename(\"WPT.LAT\" = V3, \n              \"WPT.LON\" = V5, \n              \"BWC.T\" = V7, \n              \"BWC.M\" = V9, \n              \"WPT.DIS\" = V11, \n              \"BWC.WPT\" = V13) %>% \n       na.omit()\n\n\n#GPS GGA - Global Positioning System Fix Data from Garmin ====\ngga <- dat[dat$NMEA==\"$GPGGA\", ] %>% \n          select(TIME.MS, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12) %>% \n          mutate(V3 = convCoord(as.numeric(V3)), \n                 V5 = convCoord(as.numeric(V5))*-1,\n                 V7 = as.integer(V7), \n                 V8 = as.integer(V8), \n                 V9 = as.numeric(V9),\n                 V10 = as.numeric(V10), \n                 V12 = as.numeric(V12)) %>%\n          rename(\"GPS.TIME\"=V2, \n                 \"GGA.LAT\"=V3,\n                 \"GGA.LON\"=V5,\n                 \"GPS.QUAL\"=V7, \n                 \"NO.SAT\"=V8, \n                 \"PREC\"=V9,\n                 \"ANT.ALT\"=V10,\n                 \"GEO.SEP\"=V12) %>% \n          filter(GGA.LAT < 47) %>% \n          filter(GGA.LON < -82.5) %>% \n          filter(ANT.ALT < 400) %>% \n          na.omit()\n\n\n#Geographic Position from Garmin\n#gpgll <- dat[dat$NMEA==\"$GPGLL\", ]\n\n\n#GPS XTE - Cross Track error Recommended Minimum Navigation Information B ====\n\n#xte = Cross-Track Error  <-- only thing usefull here\n#str.dir = Direction to steer\n#wpt.to = TO waypoint\n#wpt.fr = FROM waypoint\n#wpt.lat = Waypoint Latitude\n#wpt.lon = Waypoint Longitude\n#dest.rng = range to destination in NM\n#dest.ber = bearing to destination\n\nxte <- dat[dat$NMEA==\"$GPRMB\", ]  %>% \n       select(TIME.MS, V3) %>%\n       mutate(V3 = as.numeric(V3)) %>% \n       rename(\"XTE\" = V3) %>% \n       filter(XTE < 10) %>%\n       na.omit\n\n#GPS RMC - Recommended Minimum Navigation Information C ====\n\n#gps.SOG = GPS Speed Over Ground\n#tmg = Track Made Good\n\nrmc <- dat[dat$NMEA==\"$GPRMC\", ] %>%\n        select(TIME.MS, V2, V8, V9, V10) %>%\n        mutate(V8 = as.numeric(V8),\n               V9 = as.numeric(V9)) %>%\n        rename(\"RMC.TIME\"=V2,\n               \"RMC.SOG\" = V8, \n               \"RMC.TMG\" = V9,\n               \"RMC.DATE\" = V10) %>%\n        filter(RMC.SOG < 14) %>%\n        na.omit()\n  \n\n#GPS VTG -  Track Made Good and Ground Speed ====\nvtg <- dat[dat$NMEA==\"$GPVTG\", ] %>% \n         select(TIME.MS, V2, V6) %>% \n         mutate(V2 = as.numeric(V2),\n                V6 = as.numeric(V6)) %>% \n         rename(\"GPS.SOG\" = V6, \n                \"GPS.COG\" = V2) %>%\n         filter(GPS.COG <= 360) %>%\n         filter(GPS.SOG <= 12) %>% \n         na.omit()\n\n#GPS RME - Estimated Error ==== \n\nrme <- dat[dat$NMEA == \"$PGRME\", ] %>% \n       select(TIME.MS, V2, V4, V6) %>% \n       mutate(V2 = as.numeric(V2), \n              V4 = as.numeric(V4), \n              V6 = as.numeric(V6)) %>% \n       rename(\"HPE\" = V2, \n              \"VPE\" = V4, \n              \"SPE\" = V6) %>%\n       na.omit()\n\n\n# Combine Data frames\n\ndatframes <- list(mwv, stw, vlw, mtw, bod, bwc, gga, xte, rmc, vtg, rme) \n\n\nalldat <- datframes %>%\n  Reduce(function(dtf1,dtf2) full_join(dtf1,dtf2,by=\"TIME.MS\"), .)\n\n\n\n\n\n\n\n#add date/time stamps\nalldat$TIME.MS <- as.numeric(alldat$TIME.MS)\nalldat <- arrange(alldat, TIME.MS, desc(TIME.MS))\n\n\n# Adjust Time & Date to GPS Time ====\n  difftime <- head(alldat[!is.na(alldat$RMC.TIME), c(\"TIME.MS\", \"RMC.TIME\", \"RMC.DATE\")], 1)\n  \n  #get actual time from GPS (use RMC because it's the most frequent)\n  actual.time <- paste0(difftime$RMC.DATE,\"-\", difftime$RMC.TIME)\n  actual.time <- as.POSIXct(strptime(actual.time, format=\"%d%m%y-%H%M%S\", tz=\"UTC\"))\n  \n  #get the time from the Rasp Pi for that same observation\n  pi.time <- as.POSIXct(difftime$TIME.MS/1000, origin=\"1970-01-01\", tz=\"UTC\")\n  \n  #calculate the difference\n  tdiff <- as.numeric(actual.time)*1000 - as.numeric(pi.time)*1000  #time diff in ms\n  \n\n  #apply the difference to alldat\n  alldat$TIME.MS <- alldat$TIME.MS + tdiff\n  \n  #test the start and end time\n  st_time <- as.POSIXct((head(alldat$TIME.MS,1))/1000 , origin=\"1970-01-01\")\n  end_time <- as.POSIXct(tail(alldat$TIME.MS,1)/1000, origin=\"1970-01-01\")\n  \n  \n  alldat$TIME.S <- as.POSIXct(alldat$TIME.MS/1000, origin=\"1970-01-01\")\n\n#reorder columns\nalldat <- select(alldat, TIME.S, everything())\n\nprint(st_time)\nprint(end_time)\n\n\nwrite.csv(alldat, \"./dat/all_data.csv\", row.names=FALSE, na=\"\")\n\n\n\n\n\n\n",
    "created" : 1501802147293.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2402559563",
    "id" : "9CCF6012",
    "lastKnownWriteTime" : 1501881207,
    "last_content_update" : 1501881207524,
    "path" : "C:/Users/AWarmack/Dropbox/projects/sailing/BYCMACK2017/src/readNMEA.R",
    "project_path" : "src/readNMEA.R",
    "properties" : {
        "docOutlineSize" : "194.95051267497468",
        "docOutlineVisible" : "0",
        "source_window_id" : ""
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}