{
    "collab_server" : "",
    "contents" : "---\ntitle: \"BYCMACK2017 Zubenelgenubi Performance\"\noutput: github_document\n---\n\n\n```{r load data, message=FALSE, warning=FALSE, cache=TRUE, include=FALSE}\n\nknitr::opts_chunk$set(echo=FALSE)\nknitr::opts_chunk$set(warning=FALSE)\nknitr::opts_chunk$set(message=FALSE)\n\n\nlibrary(dplyr)\nlibrary(tidyr)\noptions(scipen=999)\n\ngetwd()\n#Summarise by second, 5 seconds\nrm(list=ls())\n\nload(\"../dat/alldat.RDATA\")\n\n\n#summarise by minute\n\nalldat$TIME.M <- as.POSIXct(round(alldat$TIME.S, \"mins\"))\nalldat$TIME.S <- as.POSIXct(round(alldat$TIME.S, \"secs\"))\n\n#summarise Performance Data by Minute\nperf <- alldat %>% group_by(TIME.M) %>% summarise(SOG=mean(GPS.SOG, na.rm = TRUE), \n                                                  AWS=mean(AWS, na.rm = TRUE), \n                                                  AWA=mean(AWA, na.rm = TRUE), \n                                                  COG=mean(GPS.COG, na.rm=TRUE), \n                                                  LAT=mean(GGA.LAT, na.rm=TRUE),\n                                                  LON=mean(GGA.LON, na.rm=TRUE))\n\n#remove any over 180 and convert \nperf$AWA[perf$AWA > 180] <- 360 - perf$AWA[perf$AWA > 180] \nperf <- perf[perf$AWA > 0, ] \n\n#convert Apparent to True\ngetTrueWind <- function(AWS, AWA, SOG) { \n  #outputs a list with \n  # $tws = True Wind Speed\n  # $twa = True Wind Angle\n  \n  b <- AWA * (pi/180)\n  \n  #true wind speed\n  TWS <- sqrt(AWS^2 + SOG^2 - 2*AWS*SOG*cos(b))\n  \n  \n  calcTWA <- function(b, AWS.b, SOG.b, W){\n    if(b > 0 & b<2*pi) {\n\n      TWA <- acos(((AWS.b * cos(b)) - SOG.b)/W)\n\n    } else {\n      if(b > 2*pi) {\n        TWA <- NA\n      }\n\n      TWA <- -acos(AWS.b * cos(b) - SOG.b)\n\n    }\n\n    if(!is.na(TWA)){\n\n      TWA <- TWA*180/pi\n\n    }\n    return(TWA)\n  }\n  \n  TWA <- mapply(FUN=calcTWA, b, AWS, SOG, TWS)\n\n  x <- list(TWS=TWS, TWA=TWA)\n  \n  }\n\ntw <- getTrueWind(perf$AWS, perf$AWA, perf$SOG)\nperf$TWS <- tw$TWS\nperf$TWA <- tw$TWA\n\n\n#break wind speed into bins: \nperf$AWS.range <- cut(perf$AWS, breaks=c(0, 6, 8, 10, 12, 16, 20, 24, 35))\nperf$AWS.range <- factor(perf$AWS.range, levels=rev(levels(perf$AWS.range)))\nperf$TWS.range <- cut(perf$TWS, breaks=c(0, 6, 8, 10, 12, 16, 20, 24, 35))\nperf$TWS.range <- factor(perf$TWS.range, levels=rev(levels(perf$TWS.range)))\n\n#break wind angle into bins:\nperf$AWA.range <- cut(perf$AWA, breaks=seq(0,180, by=30))\nperf$TWA.range <- cut(perf$AWA, breaks=seq(0,180, by=30))\n\n\n\ngetTWD <- function(TWA, COG){\n  \n  TWD <- COG + TWA\n  \n}\n\n\n\n```\n\n\n#Our Route\nUnfortunately, the first battery ran out around 8pm on Saturday night. So, I could only capture from Harbor Beach to just before finish. \n\nThe replacement battery ran (26800 mah) for 31 hrs, so total draw was around 0.8 amps. \n\n\n```{r plot path, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE}\nlibrary(ggmap)\nlibrary(ggrepel)\n\nmap_lims <- c(min(perf$LON), min(perf$LAT), max(perf$LON), max(perf$LAT)) \n\nlkhuron <- get_map(location = map_lims, zoom=8)\n\n#time labels\ntime_labs <- seq(round(head(perf$TIME.M, 1), units=\"hours\"), tail(perf$TIME.M, 1), by=\"4 hour\")\n\n\ntime_labs <- perf[perf$TIME.M %in% time_labs, ]\n\n\nggmap(lkhuron) + \n  geom_path(data=perf, aes(x=LON, y=LAT), color=\"red\", linetype=2, size=1) +\n  scale_color_gradientn(colors=rainbow(5), limits=c(0,10), breaks=seq(0,10, 2))+\n  geom_label_repel(data=time_labs, aes(x=LON, y=LAT, label=format(TIME.M, \"%a %H:%M\")), hjust=0, point.padding = unit(.8, \"lines\"))\n\n\n\n\n```\n\n\n\n## Wind Condition During Race\n\n```{r Wind Data, echo=FALSE, message=FALSE, warning=FALSE}\nlibrary(ggmap)\n#wind points\nwind_pts <- seq(round(head(perf$TIME.M, 1), units=\"hours\"), tail(perf$TIME.M, 1), by=\"1 hour\")\n\n\nwind_pts <- perf[perf$TIME.M %in% wind_pts, ]\n\ndeg2rad <- function(deg){\n  \n  rad <- deg * pi/180\n  return(rad)\n}\n\nggmap(lkhuron) + \n  geom_point(data=wind_pts, aes(x=LON, y=LAT, color=TWS))+\n  geom_spoke(data=wind_pts, aes(x=LON, y=LAT, angle=deg2rad(TWA+COG), color=TWS), radius=0.1)+\n  scale_color_gradientn(colors=rainbow(5), breaks=seq(0,30, 5))+\n  ggtitle(\"True Wind Direction\")\n\n# #APPARENT WIND\n# ggplot(perf, aes(AWA)) + \n#   geom_histogram(aes(fill=AWS.range)) + \n#   scale_x_continuous(name=\"Apparent Wind Angle [Deg]\")+\n#   scale_y_discrete(name=\"AWS [kts]\") +\n#   ggtitle(\"Apparent Wind Distribution\")\n# \n# #TRUE WIND\n# ggplot(perf, aes(TWA)) + \n#   geom_histogram(aes(fill=TWS.range), position=\"stack\") + \n#   scale_x_continuous(name=\"True Wind Angle [Deg]\")+\n#   scale_y_discrete(name=\"TWS [kts]\") + \n#   ggtitle(\"True Wind Distribution\")\n\n\n\nggplot(perf, aes(AWA, fill=AWS.range)) + geom_histogram(binwidth=10, position=\"stack\") + coord_polar() + scale_x_continuous(limits=c(0,360), breaks=seq(0,360, by=15))+\n  ggtitle(\"Apparent Wind Distribution\")\n\nggplot(perf, aes(TWA, fill=TWS.range)) + geom_histogram(binwidth=10, position=\"stack\") + coord_polar() + scale_x_continuous(limits=c(0,360), breaks=seq(0,360, by=15))+\n  ggtitle(\"True Wind Distribution\")\n\n\n\n\n```\n\n\n\n#Boat Performance\n\n\n```{r Speed Over The Trip, echo=FALSE, message=FALSE, warning=FALSE}\nlibrary(scales)\nlibrary(ggrepel)\n\nggmap(lkhuron) + \n  geom_path(data=perf, aes(x=LON, y=LAT, color=SOG), size=2) +\n  scale_color_gradientn(colors=rainbow(5), limits=c(0,10), breaks=seq(0,10, 2))+\n  geom_label_repel(data=time_labs, aes(x=LON, y=LAT, label=format(TIME.M, \"%a %H:%M\")), hjust=0, point.padding = unit(1, \"lines\"))\n\n\n\nggplot(perf) + \n  geom_path(aes(x=TIME.M, y=SOG, color=SOG), size=1, lineend=\"round\") +\n  ggtitle(\"GPS Speed Over Ground\")+\n  scale_color_gradientn(colors=rainbow(5), limits=c(0,10), breaks=seq(0,10, 2), name=\"SOG [kts]\")+\n  scale_x_datetime(breaks=date_breaks(\"2 hours\"), date_labels = \"%a %H:%M\")+\n  theme(axis.text.x = element_text(angle = 70, hjust = 1))\n\n\n\n\nggplot(perf) + \n  geom_path(aes(x=TIME.M, y=SOG, color=TWS), size=1, lineend=\"round\") +\n  ggtitle(\"GPS Speed Over Ground by True Wind Speed\")+\n  scale_color_gradientn(colors=rainbow(5), breaks=seq(0,30, 5), name=\"TWS [kts]\")+\n  scale_x_datetime(breaks=date_breaks(\"2 hours\"), date_labels = \"%a %H:%M\")+\n  theme(axis.text.x = element_text(angle = 70, hjust = 1))\n  \n\n\n```\nLooking at the wind, we can see our wind speed dropped dramatically during this middle leg. \n\n\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\nggplot() + \n  geom_point(data=perf,  aes(x=AWA, y=SOG, color=AWS), alpha=0.7) + \n  coord_polar(\"x\") + \n  scale_x_continuous(limits=c(0,360), breaks=seq(0,360, 15))+\n  scale_y_continuous(limits=c(0,8), breaks=seq(0,8, by=2))+\n  scale_color_gradientn(colors=rainbow(5), breaks=seq(0,30, 5))+\n  ggtitle(\"SOG for given Apparent Wind Angle and Wind Speed\")\n\nggplot() + \n  geom_point(data=perf,  aes(x=TWA, y=SOG, color=TWS), alpha=0.7) + \n  coord_polar(\"x\") + \n  scale_x_continuous(limits=c(0,360), breaks=seq(0,360, 15))+\n  scale_y_continuous(limits=c(0,8), breaks=seq(0,8, by=2))+\n  scale_color_gradientn(colors=rainbow(5), breaks=seq(0,30, 5))+\n  ggtitle(\"SOG for given True Wind Angle and Wind Speed\")\n\nggplot() + \n geom_histogram(data=perf, aes(SOG, fill=TWS.range), color=\"black\") + facet_grid(TWS.range ~ TWA.range)+\n  ggtitle(\"SOG at different Wind Speed & Angle Ranges\") \n\n#+\n  #scale_color_gradientn(colors=rainbow(5), limits=c(0,10), breaks=seq(0,10, 2))\n # scale_x_datetime(breaks=date_breaks(\"2 hours\"), date_labels = \"%a %H:%M\")\n\n```\nWe can see here that are speeds vary much more at lower wind speeds and when beating. Not too suprising. \n\n```{r, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE}\nlibrary(akima)\nlibrary(dplyr)\n\n#load Polars\npolars <- read.csv(\"../dat/polars/fullpolar.csv\")\n\n#remove optimum points\nopt <- polars[grep(\"OPT\", polars$SAIL), ]\npolars <- polars[-grep(\"OPT\", polars$SAIL),  ]\n\n#get the maximum V (velocity) for each wind speed and angle\npol <- polars %>% group_by(VTW, BTW) %>% summarise(V=max(V))\n\n#rejoin to the sail and heel data\npol <- left_join(pol, polars)\n\n#pol.0 <- data.frame(VTW = 0, BTW = 32:180, V=0, VAW=0, BAW=0, VMG=0, PHI=0, SAIL=\"Jib\")\n\n#pol <- rbind(pol, pol.0)\n\n\n# get the polar targets\npol.targets <- interpp(x=pol$VTW, \n                       y=pol$BTW, \n                       z=pol$V, \n                       xo = perf$TWS, \n                       yo= perf$TWA,\n                       linear=FALSE,\n                       extrap=FALSE,\n                       duplicate = \"mean\")\n\n#Calculate Measurables\nperf$target.SOG <- pol.targets$z\nperf$diff.SOG <- perf$SOG - perf$target.SOG\nperf$pol.perc <- (perf$SOG / perf$target.SOG) * 100\n\n\ntargets <- expand.grid(TWS= seq(6, 35, by = 1), TWA=seq(30, 180, by=1))\ntargets$target.sog <- interpp(x=pol$VTW, \n                              y=pol$BTW, \n                              z=pol$V, \n                        xo = targets$TWS, \n                        yo= targets$TWA,\n                        linear=TRUE,\n                        extrap=FALSE,\n                        duplicate = \"mean\")$z\n\n\n```\n\n#Performance VS Polars\n\n### Polar Model (using linear interpolation)\nI used a simple linear interpolation between points to estimate our target speed at a given TWS and TWA. \nAny grey points are outside of the model and could not be estimated. \n\nThe below three graphs just show different views of the polar model.\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\n\n\n\nggplot()+\n  geom_raster(data=targets, aes(x=TWA, y=TWS, fill=target.sog), alpha=0.5)+\n  geom_point(data=pol, aes(x=BTW, y=VTW, color=V)) +\n  geom_path(data=pol, aes(x=BTW, y=VTW, group=VTW)) +\n  scale_x_continuous(limits=c(30,180), breaks=seq(30,180, 15))+\n  scale_y_continuous(limits=c(0,30), breaks=seq(0,30, by=2))+\n  scale_color_gradientn(colors=rainbow(5), breaks=seq(0,10, 2), name=\"Target SOG[kts]\")+\n  scale_fill_gradientn(colors=rainbow(5), breaks=seq(0,10, 12), name=\"Target SOG[kts]\")+\n  ggtitle(\"Expected SOG by TWA and TWS\")\n\nprint(\"The black lines are the data values provided by ORA\")\n\nggplot()+\n  geom_point(data=targets, aes(x=TWA, y=target.sog, color=target.sog))+\n  geom_path(data=pol, aes(x=BTW, y=V, group=VTW))+\n  #coord_polar()+\n  scale_x_continuous(limits=c(30,180), breaks=seq(0,180, 15))+\n  scale_y_continuous(limits=c(0,10), breaks=seq(0,10, by=2))+\n  scale_color_gradientn(colors=rainbow(5), breaks=seq(0,10, 1), name=\"Target SOG[kts]\") +\n  ggtitle(\"Expected SOG by TWA\")\n\nggplot()+\n  geom_point(data=targets, aes(x=TWA, y=target.sog, color=target.sog))+\n  geom_path(data=pol, aes(x=BTW, y=V, group=VTW, linetype=\"TWS\"))+\n  coord_polar()+\n  scale_x_continuous(limits=c(0,360), breaks=seq(0,360, 15))+\n  scale_y_continuous(limits=c(0,10), breaks=seq(0,10, by=2))+\n  scale_color_gradientn(colors=rainbow(5), breaks=seq(0,10, 1), name=\"Target SOG[kts]\")+\n  ggtitle(\"Polar View of Expected SOG by TWA\")+\n  scale_linetype(name=\"Polar Data\")\n\n\n```\n\n##Observed Performance\nOur actual performance versus the polar. \n\nIn general it seems like we did pretty well to our polars. The biggest defficiencies were at slower speeds under 10 kts.  Not too suprising. \n\nUnforatunately, about 20% of the data couldn't be estimated by the model. I'm working on this. \n\nWe averaged 93.67% of our polar. A reasonable target is 95%. \n\n```{r plot polars, echo=FALSE, message=FALSE, warning=FALSE}\n\npol_labels <- pol[pol$BTW==180, ]\n\nggplot()+\n  geom_raster(data=targets, aes(x=TWA, y=TWS, fill=target.sog), alpha=0.5)+\n  geom_point(data=pol, aes(x=BTW, y=VTW, color=V)) +\n  geom_path(data=pol, aes(x=BTW, y=VTW, group=VTW)) +\n  geom_point(data=perf, aes(x=TWA, y=TWS, color=SOG))+\n  scale_x_continuous(limits=c(30,180), breaks=seq(30,180, 15))+\n  scale_y_continuous(limits=c(0,30), breaks=seq(0,30, by=2))+\n  scale_color_gradientn(colors=rainbow(5), breaks=seq(0,10, 2), name=\"Target SOG[kts]\", na.value = \"black\")+\n  scale_fill_gradientn(colors=rainbow(5), breaks=seq(0,10, 12), name=\"Target SOG[kts]\")+\n  ggtitle(\"Observed SOG by TWA and TWS\")\n\n\nggplot() + \n  geom_path(data=pol, aes(x=BTW, y=V, group=VTW)) + \n  #coord_polar(\"x\") + \n  scale_x_continuous(limits=c(0,180), breaks=seq(0,180, 15), name=\"True Wind Angle\") + \n  scale_y_continuous(name=\"SOG\", limits=c(0,9))+\n  geom_vline(xintercept=0)+\n  geom_vline(xintercept=90)+\n  geom_vline(xintercept=180)+\n  geom_vline(xintercept=270)+\n  ggtitle(\"% of Polar Performance by AWA\")+\n  geom_point(data=perf, aes(x=AWA, y=SOG, color=pol.perc), alpha=0.5)+\n  scale_color_gradientn(colors=rainbow(5), breaks=seq(0,120, by=20), name= \"% of Target\")+\n  geom_text(data=pol_labels, aes(x=BTW, y=V, label=VTW), hjust=0)\n\nggplot() + \n  geom_path(data=pol, aes(x=BTW, y=V, group=VTW)) + \n  coord_polar(\"x\") + \n  scale_x_continuous(limits=c(0,360), breaks=seq(0,360, 15), name=\"True Wind Angle\") + \n  scale_y_continuous(name=\"SOG\", limits=c(0,9))+\n  geom_vline(xintercept=0)+\n  geom_vline(xintercept=90)+\n  geom_vline(xintercept=180)+\n  geom_vline(xintercept=270)+\n  ggtitle(\"% of Polar Performance by AWA\")+\n  geom_point(data=perf, aes(x=AWA, y=SOG, color=pol.perc), alpha=0.5)+\n  scale_color_gradientn(colors=rainbow(5), breaks=seq(0,120, by=20), name= \"% of Target\")+\n  geom_text(data=pol_labels, aes(x=BTW, y=V, label=VTW), hjust=1)\n\n\n\n```\n\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\n\nggplot(perf) + \n  geom_path(aes(x=TIME.M, y=SOG, color=pol.perc), size=1, lineend=\"round\") +\n  ggtitle(\"GPS Speed Over Ground vs. Target\")+\n  scale_color_gradientn(colors=rainbow(5), breaks=seq(0,120, by=10), name= \"% of Target\")+\n  scale_x_datetime(breaks=date_breaks(\"2 hours\"), date_labels = \"%a %H:%M\")+\n  theme(axis.text.x = element_text(angle = 70, hjust = 1))+\n  geom_path(aes(x=TIME.M, y=target.SOG, linetype=\"Target SOG\"))+scale_linetype(name=\"Polars\")\n\n```\n\n```{r histogram of Polar Performance, echo=FALSE, message=FALSE, warning=FALSE}\n\nggplot(perf, aes(pol.perc)) + \n  geom_histogram(binwidth=2.5, color=\"black\") + \n  scale_x_continuous(name=\"% of Target Speed\", breaks=seq(20,120,by=5))+\n  ggtitle(\"Overall Distribution of Performance v. Polar\")+\n  geom_vline(xintercept=mean(perf$pol.perc, na.rm = TRUE), color=\"Red\", linetype=2, size=1)+\n  geom_text(x=mean(perf$pol.perc), y=Inf, label=round(mean(perf$pol.perc,2, na.rm = TRUE),2), vjust=1)\n\nprint(paste(\"Mean Performance = \", round(mean(perf$pol.perc,2, na.rm = TRUE),2), \"%\"))\n\nggplot(perf, aes(pol.perc, fill=TWS.range)) + \n  geom_histogram(binwidth=2.5,position=\"stack\", color=\"black\") + \n  scale_x_continuous(name=\"% of Target Speed\", breaks=seq(20,120,by=5)) +\n  facet_grid(TWS.range ~ .)+\n  ggtitle(\"Polar Performance at different Wind Speed Ranges\")\n\n\nggplot(perf, aes(y=pol.perc, x=TWS.range, fill=TWS.range)) + \n  geom_hline(yintercept=95)+\n  geom_boxplot() + \n  scale_y_continuous(name=\"% of Target Speed\", breaks=seq(20,120,by=5)) + \n  ggtitle(\"Polar Performance at different Wind Speed Ranges\")\n  \n\nggplot(perf, aes(pol.perc, fill=TWA.range)) + \n  geom_histogram(binwidth=2.5,position=\"stack\", color=\"black\") + \n  scale_x_continuous(name=\"% of Target Speed\", breaks=seq(20,120,by=5)) +\n  facet_grid(TWA.range ~ .)+\n  ggtitle(\"Polar Performance at different Wind Speed Ranges\")\n\n\nggplot(perf, aes(y=pol.perc, x=TWA.range, fill=TWA.range)) + \n  geom_hline(yintercept=95)+\n  geom_boxplot() + \n  scale_y_continuous(name=\"% of Target Speed\", breaks=seq(20,120,by=5)) + \n  ggtitle(\"Polar Performance at different Wind Speed Ranges\")\n\n```\n\n\n#Calculation of Optimal finish time given same wind condition and course\n\n\n```{r, echo=TRUE, message=FALSE, warning=FALSE}\n\nmean.target.speed <- mean(perf$target.SOG, na.rm = TRUE)\n\nrhumb.length <- 205  #in NM\n\nestimated.elapsed <- rhumb.length / mean.target.speed\n\npaste(\"Optimal elapsed time\", round(estimated.elapsed, 2), \"hrs\")  \n\n#actual estimated time \nactual.elapsed <- 38 + 52/60 + 24/3600\n\n\n#time loss due under target\npaste(\"Time Diff between actual and optimal\", round(actual.elapsed - estimated.elapsed, 2), \"hrs\")\n\n#corrected time\norr <- .721\n\npaste(\"Corrected Optimal Time\", round((estimated.elapsed * orr), 2), \"hrs\")\n\n```\n\nA corrected time of 23.22 would put us 4th in Section N and 10th in DII overall. \n\n\n\n\n\n\n\n\n",
    "created" : 1502481453689.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3697389932",
    "id" : "31F4D9BB",
    "lastKnownWriteTime" : 1502481539,
    "last_content_update" : 1502481539569,
    "path" : "C:/Users/AWarmack/Dropbox/projects/sailing/BYCMACK2017/analysis/bycmack_performance.Rmd",
    "project_path" : "analysis/bycmack_performance.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}