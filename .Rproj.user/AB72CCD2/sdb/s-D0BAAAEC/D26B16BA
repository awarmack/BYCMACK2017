{
    "collab_server" : "",
    "contents" : "#summardize by time\nlibrary(dplyr)\nlibrary(tidyr)\noptions(scipen=999)\n\n#Summarise by second, 5 seconds\nrm(list=ls())\n\nload(\"./alldat.RDATA\")\n\n\n#summarise by minute\n\nalldat$TIME.M <- as.POSIXct(round(alldat$TIME.S, \"mins\"))\nalldat$TIME.S <- as.POSIXct(round(alldat$TIME.S, \"secs\"))\n\n#get performance data\n\nperf <- alldat %>% group_by(TIME.M) %>% summarise(SOG=mean(GPS.SOG, na.rm = TRUE), \n                                                  AWS=mean(AWS, na.rm = TRUE), \n                                                  AWA=mean(AWA, na.rm = TRUE), \n                                                  COG=mean(GPS.COG, na.rm=TRUE), \n                                                  LAT=mean(GGA.LAT, na.rm=TRUE),\n                                                  LON=mean(GGA.LON, na.rm=TRUE))\n\nperf$AWA[perf$AWA > 180] <- 360 - perf$AWA[perf$AWA > 180] \nperf <- perf[perf$AWA > 0, ] \n\n\n#break AWS into bins\nperf$AWS.range <- cut(perf$AWS, breaks=c(0, 6, 8, 10, 12, 16, 20, 24, 35))\n#perf$AWS.range <- gsub(\"]\", \")\", perf$AWS.range)\n#perf$AWS.range <- gsub(\",\", \"~\", perf$AWS.range)\n\n#perf$AWS.range <- ordered(perf$AWS.range, levels=c(\"(0~6)\", \"(6~8)\", \"(8~10)\", \"(10~12)\", \"(12~16)\", \"(16~20)\", \"(20~24)\", \"(24~35)\"))\n\n#break AWA into bins \nperf$AWA.range <- cut(perf$AWA, breaks=seq(0,180, by=15))\n\n\n\n#convert AWS, AWA, and SOG to TWS and TWD\n\n\ngetTrueWind <- function(AWS, AWA, SOG) { \n  #outputs a list with \n  # $tws = True Wind Speed\n  # $twa = True Wind Angle\n  \n  b <- AWA * (pi/180)\n  \n  TWS <- sqrt(AWS^2 + SOG^2 - 2*AWS*SOG*cos(b))\n  \n  # from polars: \n  #VTW = SQRT( (VAW * SIN(BAW))^2 + (VAW x cos(BAW)-Vboat)^2)\n  #\n  # VTW = velocity true wind\n  # VAW = Velocity Apparent\n  # BAW = Bearing of Apparent Wind\n  #\n  \n  #TWS <- sqrt( (AWS * sin(b))^2 + (AWS * cos(b)-SOG)^2)\n  \n  \n  \n  #BTW = arc tan ( (VAW x sin(BAW)) / (VAW x cos(BAW)-vboat))\n  \n  \n  TWA <- atan( (AWS * sin(b))/ (AWS * cos(b)-SOG))\n  TWA <- TWA*180/pi\n    \n  \n  #calcTWA <- function(b, AWS.b, SOG.b, W){\n  #   if(b > 0 & b<2*pi) {\n  #     \n  #     TWA <- acos(((AWS.b * cos(b)) - SOG.b)/W)\n  #     \n  #   } else {\n  #     if(b > 2*pi) {\n  #       TWA <- NA\n  #     }\n  #     \n  #     TWA <- -acos(AWS.b * cos(b) - SOG.b)\n  #     \n  #   }\n  #   \n  #   if(!is.na(TWA)){\n  #     \n  #     TWA <- TWA*180/pi\n  #     \n  #   }\n  #   return(TWA)\n  # }\n  \n  #TWA <- mapply(FUN=calcTWA, b, AWS, SOG, TWS)\n\n  x <- list(TWS=TWS, TWA=TWA)\n  \n  \n  }\n\ntw <- getTrueWind(perf$AWS, perf$AWA, perf$SOG)\nperf$TWS <- tw$TWS\nperf$TWA <- tw$TWA\n\n\n#add point of sail to perf\n\n\nwaypoints <- alldat %>% filter(!is.na(BWC.WPT)) %>% group_by(BWC.WPT) %>% summarise(LAT = mean(WPT.LAT),\n                                                                                  LON = mean(WPT.LON))\n\n\n\n\n",
    "created" : 1502414409494.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1282141113",
    "id" : "D26B16BA",
    "lastKnownWriteTime" : 1502407528,
    "last_content_update" : 1502407528,
    "path" : "C:/Users/AWarmack/Dropbox/projects/sailing/BYCMACK2017/src/loadData.R",
    "project_path" : "src/loadData.R",
    "properties" : {
        "source_window_id" : ""
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}